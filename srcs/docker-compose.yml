services :
  maria_db:
    image: mariadbdef
    build: requirements/mariadb
    container_name: mariadb
    restart: always
    networks:
      - my_network
    environment :
      DATA_BASE_NAME: ${DATA_BASE_NAME}
      DATA_BASE_USER: ${DATA_BASE_USER}
      DATA_BASE_PASS: ${DATA_BASE_PASS}

  redis:
    image : redis
    container_name : redis
    build: requirements/bonus/redis
    restart : always
    networks:
      - my_network
    ports :
      - "6379:6379"
  wordpress:
    image : wordpress 
    container_name: wordpress
    depends_on:
      - maria_db
      - redis
    # restart: always
    networks:
      - my_network
    volumes: 
      - wordpressda:/var/www
    environment :
      DATA_BASE_NAME    : ${DATA_BASE_NAME}
      DATA_BASE_USER    : ${DATA_BASE_USER}
      DATA_BASE_PASS    : ${DATA_BASE_PASS}
      WORDPRESS_DB_HOST : maria_db:3306
      CONF_DB_NAME: ${CONF_DB_NAME}
      CONF_DB_USER: ${CONF_DB_USER}
      CONF_DB_HOST: ${CONF_DB_HOST}
      CONF_DB_PASSWORD: ${CONF_DB_PASSWORD}
      ADMIN_USER: ${ADMIN_USER}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASS: ${ADMIN_PASS}
      SITE_TITLE: ${SITE_TITLE}
      SITE_URL: ${SITE_URL}
    build : requirements/wordpress

  nginx    :
    image  : nginx
    build  : requirements/nginx
    container_name: nginx
    restart : always
    networks:
      - my_network
    ports :
      - "443:443"
      - "8080:80"
    depends_on :
      - wordpress
    volumes:
      - wordpressda:/var/www
  adminer:
    image : adminerdef
    build : requirements/bonus/adminer
    container_name : adminer
    restart : always
    volumes :
      - adminer_volume:/tmp
    networks:
      - my_network
    depends_on :
      - nginx
      - maria_db
    ports :
      - "8000:8000"
  ftp:
    image: ftp_42
    build : requirements/bonus/ftp
    container_name : ftp
    restart : always
    networks :
      - my_network
    ports :
      - "20:20"
      - "21:21"
      - "40100-40110:40100-40110"
volumes:
    wordpressda:
    adminer_volume:

networks:
  my_network:
    driver: bridge
 
# version: Specifies the Docker Compose file format version.
# services: Defines the containers (services) of the application.
# image: The Docker image to use for the container.
# build: Defines the build context for creating a custom image.
# environment: Defines environment variables for a container.
# ports: Maps container ports to host machine ports.
# volumes: Defines persistent storage volumes.
# networks: Configures the networks for container communication.
# depends_on: Specifies dependencies between services.
# restart: Configures the container's restart behavior.
# extra_hosts: Adds custom entries to the container's /etc/hosts file.
# healthcheck: Configures a health check for a service container.
# logging: Configures the logging driver for a service container.
# deploy: Specifies deployment configurations (mostly for Docker Swarm).
# labels: Adds metadata to the container in key-value pairs.
# user: Specifies the user to run the container as.
# network_mode: Configures the network mode for the container.
# container_name: Specifies the container's name.
# cpus: Limits the number of CPUs available to the container.
# mem_limit: Specifies the memory limit for the container.
# ulimits: Configures user resource limits for the container.
